"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MoneyToLetter = exports.NumberToLetter = void 0;
const utils_1 = require("./utils");
function NumberToLetter(nombre) {
    let i, j, n, quotient, reste, nb;
    let numberToLetter = '';
    if (nombre.toString().replace(/ /gi, "").length > 15)
        throw new Error('Number too large');
    if (isNaN(+nombre.toString().replace(/ /gi, "")))
        throw new Error('Invalid number');
    nb = parseFloat(nombre.toString().replace(/ /gi, ""));
    if (Math.ceil(nb) != nb)
        throw new Error('Unsupported decimal number');
    n = nb.toString().length;
    switch (n) {
        case 1:
            numberToLetter = (0, utils_1.Unite)(nb);
            break;
        case 2:
            if (nb > 19) {
                quotient = Math.floor(nb / 10);
                reste = nb % 10;
                if (nb < 71 || (nb > 79 && nb < 91)) {
                    if (reste == 0)
                        numberToLetter = (0, utils_1.Dizaine)(quotient * 10);
                    if (reste == 1)
                        numberToLetter = (0, utils_1.Dizaine)(quotient * 10) + "-et-" + (0, utils_1.Unite)(reste);
                    if (reste > 1)
                        numberToLetter = (0, utils_1.Dizaine)(quotient * 10) + "-" + (0, utils_1.Unite)(reste);
                }
                else
                    numberToLetter = (0, utils_1.Dizaine)((quotient - 1) * 10) + "-" + (0, utils_1.Dizaine)(10 + reste);
            }
            else
                numberToLetter = (0, utils_1.Dizaine)(nb);
            break;
        case 3:
            quotient = Math.floor(nb / 100);
            reste = nb % 100;
            if (quotient == 1 && reste == 0)
                numberToLetter = "cent";
            if (quotient == 1 && reste != 0)
                numberToLetter = "cent" + " " + NumberToLetter(reste);
            if (quotient > 1 && reste == 0)
                numberToLetter = (0, utils_1.Unite)(quotient) + " cents";
            if (quotient > 1 && reste != 0)
                numberToLetter = (0, utils_1.Unite)(quotient) + " cent " + NumberToLetter(reste);
            break;
        case 4:
            quotient = Math.floor(nb / 1000);
            reste = nb - quotient * 1000;
            if (quotient == 1 && reste == 0)
                numberToLetter = "mille";
            if (quotient == 1 && reste != 0)
                numberToLetter = "mille" + " " + NumberToLetter(reste);
            if (quotient > 1 && reste == 0)
                numberToLetter = NumberToLetter(quotient) + " mille";
            if (quotient > 1 && reste != 0)
                numberToLetter = NumberToLetter(quotient) + " mille " + NumberToLetter(reste);
            break;
        case 5:
            quotient = Math.floor(nb / 1000);
            reste = nb - quotient * 1000;
            if (quotient == 1 && reste == 0)
                numberToLetter = "mille";
            if (quotient == 1 && reste != 0)
                numberToLetter = "mille" + " " + NumberToLetter(reste);
            if (quotient > 1 && reste == 0)
                numberToLetter = NumberToLetter(quotient) + " mille";
            if (quotient > 1 && reste != 0)
                numberToLetter = NumberToLetter(quotient) + " mille " + NumberToLetter(reste);
            break;
        case 6:
            quotient = Math.floor(nb / 1000);
            reste = nb - quotient * 1000;
            if (quotient == 1 && reste == 0)
                numberToLetter = "mille";
            if (quotient == 1 && reste != 0)
                numberToLetter = "mille" + " " + NumberToLetter(reste);
            if (quotient > 1 && reste == 0)
                numberToLetter = NumberToLetter(quotient) + " mille";
            if (quotient > 1 && reste != 0)
                numberToLetter = NumberToLetter(quotient) + " mille " + NumberToLetter(reste);
            break;
        case 7:
            quotient = Math.floor(nb / 1000000);
            reste = nb % 1000000;
            if (quotient == 1 && reste == 0)
                numberToLetter = "un million";
            if (quotient == 1 && reste != 0)
                numberToLetter = "un million" + " " + NumberToLetter(reste);
            if (quotient > 1 && reste == 0)
                numberToLetter = NumberToLetter(quotient) + " millions";
            if (quotient > 1 && reste != 0)
                numberToLetter = NumberToLetter(quotient) + " millions " + NumberToLetter(reste);
            break;
        case 8:
            quotient = Math.floor(nb / 1000000);
            reste = nb % 1000000;
            if (quotient == 1 && reste == 0)
                numberToLetter = "un million";
            if (quotient == 1 && reste != 0)
                numberToLetter = "un million" + " " + NumberToLetter(reste);
            if (quotient > 1 && reste == 0)
                numberToLetter = NumberToLetter(quotient) + " millions";
            if (quotient > 1 && reste != 0)
                numberToLetter = NumberToLetter(quotient) + " millions " + NumberToLetter(reste);
            break;
        case 9:
            quotient = Math.floor(nb / 1000000);
            reste = nb % 1000000;
            if (quotient == 1 && reste == 0)
                numberToLetter = "un million";
            if (quotient == 1 && reste != 0)
                numberToLetter = "un million" + " " + NumberToLetter(reste);
            if (quotient > 1 && reste == 0)
                numberToLetter = NumberToLetter(quotient) + " millions";
            if (quotient > 1 && reste != 0)
                numberToLetter = NumberToLetter(quotient) + " millions " + NumberToLetter(reste);
            break;
        case 10:
            quotient = Math.floor(nb / 1000000000);
            reste = nb - quotient * 1000000000;
            if (quotient == 1 && reste == 0)
                numberToLetter = "un milliard";
            if (quotient == 1 && reste != 0)
                numberToLetter = "un milliard" + " " + NumberToLetter(reste);
            if (quotient > 1 && reste == 0)
                numberToLetter = NumberToLetter(quotient) + " milliards";
            if (quotient > 1 && reste != 0)
                numberToLetter = NumberToLetter(quotient) + " milliards " + NumberToLetter(reste);
            break;
        case 11:
            quotient = Math.floor(nb / 1000000000);
            reste = nb - quotient * 1000000000;
            if (quotient == 1 && reste == 0)
                numberToLetter = "un milliard";
            if (quotient == 1 && reste != 0)
                numberToLetter = "un milliard" + " " + NumberToLetter(reste);
            if (quotient > 1 && reste == 0)
                numberToLetter = NumberToLetter(quotient) + " milliards";
            if (quotient > 1 && reste != 0)
                numberToLetter = NumberToLetter(quotient) + " milliards " + NumberToLetter(reste);
            break;
        case 12:
            quotient = Math.floor(nb / 1000000000);
            reste = nb - quotient * 1000000000;
            if (quotient == 1 && reste == 0)
                numberToLetter = "un milliard";
            if (quotient == 1 && reste != 0)
                numberToLetter = "un milliard" + " " + NumberToLetter(reste);
            if (quotient > 1 && reste == 0)
                numberToLetter = NumberToLetter(quotient) + " milliards";
            if (quotient > 1 && reste != 0)
                numberToLetter = NumberToLetter(quotient) + " milliards " + NumberToLetter(reste);
            break;
        case 13:
            quotient = Math.floor(nb / 1000000000000);
            reste = nb - quotient * 1000000000000;
            if (quotient == 1 && reste == 0)
                numberToLetter = "un billion";
            if (quotient == 1 && reste != 0)
                numberToLetter = "un billion" + " " + NumberToLetter(reste);
            if (quotient > 1 && reste == 0)
                numberToLetter = NumberToLetter(quotient) + " billions";
            if (quotient > 1 && reste != 0)
                numberToLetter = NumberToLetter(quotient) + " billions " + NumberToLetter(reste);
            break;
        case 14:
            quotient = Math.floor(nb / 1000000000000);
            reste = nb - quotient * 1000000000000;
            if (quotient == 1 && reste == 0)
                numberToLetter = "un billion";
            if (quotient == 1 && reste != 0)
                numberToLetter = "un billion" + " " + NumberToLetter(reste);
            if (quotient > 1 && reste == 0)
                numberToLetter = NumberToLetter(quotient) + " billions";
            if (quotient > 1 && reste != 0)
                numberToLetter = NumberToLetter(quotient) + " billions " + NumberToLetter(reste);
            break;
        case 15:
            quotient = Math.floor(nb / 1000000000000);
            reste = nb - quotient * 1000000000000;
            if (quotient == 1 && reste == 0)
                numberToLetter = "un billion";
            if (quotient == 1 && reste != 0)
                numberToLetter = "un billion" + " " + NumberToLetter(reste);
            if (quotient > 1 && reste == 0)
                numberToLetter = NumberToLetter(quotient) + " billions";
            if (quotient > 1 && reste != 0)
                numberToLetter = NumberToLetter(quotient) + " billions " + NumberToLetter(reste);
            break;
    } //fin switch
    /*respect de l'accord de quatre-vingt*/
    if (numberToLetter.substring(numberToLetter.length - "quatre-vingt".length, "quatre-vingt".length) == "quatre-vingt")
        numberToLetter = numberToLetter + "s";
    return numberToLetter;
}
exports.NumberToLetter = NumberToLetter;
// MoneyToLetter(12.05, 'euro') => douze euros et 5 centimes
function MoneyToLetter(nombre, devise) {
    let parts = `${nombre}`.split('.');
    let integerpart = +parts[0];
    let integerpartstring = NumberToLetter(integerpart);
    let virgulepartstring = '';
    if (parts.length > 1) {
        let virgulepart = +parts[1];
        // convert to cents : 0,5 => 0,50
        if (virgulepart > 0 && virgulepart < 10)
            virgulepart = virgulepart * 10;
        // remove sub cents : 0,5123 => 0,51
        virgulepart = Math.round(virgulepart * 100) / 100;
        virgulepartstring = NumberToLetter(virgulepart);
    }
    return `${integerpartstring} ${devise}${integerpart <= 1 ? '' : 's'}${virgulepartstring ? ` et ${virgulepartstring} centimes` : ''}`;
}
exports.MoneyToLetter = MoneyToLetter;
